# download the transcriptome dataset from Brainspan.org  
# http://www.brainspan.org/static/download.html 

#set working directory for brainspan files
setwd()
rows <- read.csv("rows_metadata.csv")
columns <- read.csv("columns_metadata.csv")
columns$colname <- paste("col",columns$column_num, sep="")
expression <- read.csv("expression_matrix.csv",header = F)
datcolnames <- c(colnames(rows), columns$colname)
d <- cbind(rows, expression[,2:525])
colnames(d) <- datcolnames
d$gene_symbol <- as.character(d$gene_symbol)
d$ensembl_gene_id <- as.character(d$ensembl_gene_id)
str(d)

write.csv(d, "Brainspan_expressiondata.csv", row.names = F) #
d<- read.csv("Brainspan_expressiondata.csv")

#############################
#2. QC Brainspan            #
#############################

#Exclude genes with little or no variation in expression over spatiotemporal. 
rm(cc)
cc <- vector()

for (i in 1:nrow(d)){
  if (i %% 1000==0) {print(i)}
  testgene <- d[i,6:ncol(d)]
  cv <- sd(t(testgene),na.rm=T)/mean(t(testgene),na.rm = T)
  cc <- c(cc, cv)
}

d$CV <- cc
d$iscv <- ifelse(d$CV>0.1,1,0)
summary(d$CV)

#remove 0 transcripts

d$max<- apply(d[,6:529], 1, max)
min(d$max)==0
length(which(d$max==0))
dd<- d[d$max !=0,]
min(dd$max)==0

#Annotate human genes 
#download human gene ids from ensembl
setwd()
ensgenes <- read.csv("mart_export_all_ens_genes.txt", header=T)
ensgenes$Gene.stable.ID <- as.character(ensgenes$Gene.stable.ID)
ensgenes$Gene.name <- as.character(ensgenes$Gene.name)

dd$ishuman <- ifelse(is.element(dd$ensembl_gene_id, ensgenes$Gene.stable.ID),1,0)
summary(dd$ishuman)

#Annotate  protein codinggenes
#download protein coding gene ids from ensembl
setwd()
prot <- read.csv("mart_export_protein_coding_genes.txt", header=T)
prot$Gene.stable.ID <- as.character(prot$Gene.stable.ID)
prot$Gene.name <- as.character(prot$Gene.name)
dd$prot <- ifelse(is.element(dd$ensembl_gene_id, prot$Gene.stable.ID),1,0)
summary(dd$prot)


#unique gene_id
ddd<- dd[!duplicated(dd$gene_symbol), ]

sum(ddd$iscv)
sum(ddd$ishuman)


#check files 
dcv<- ddd[(ddd$iscv==1 & !is.na(ddd$iscv)) & ddd$ishuman==1 & !is.na(ddd$ishuman) ,]
dcv.prot <- dcv[dcv$prot==1,]

summary(dcv$iscv) #check if all genes have cv>0.1 and are protein coding (=1)
summary(dcv$prot) #check if all genes have cv>0.1 and are protein coding (=1)
length(unique(dcv$gene_symbol))==nrow(dcv)

summary(dcv.prot$iscv) #check if all genes have cv>0.1 and are protein coding (=1)
summary(dcv.prot$prot) #check if all genes have cv>0.1 and are protein coding (=1)
length(unique(dcv.prot$gene_symbol))==nrow(dcv.prot)


#write dataset
setwd()
write.csv(d, "Brainspan_expressiondata_uncurated.csv", row.names = F) #Brainspan expression dataset
write.csv(dcv, "Brainspan_expressiondata_cv_human_uniquegene.csv", row.names = F) #Curated brainspan expression dataset
write.csv(dcv.prot, "Brainspan_expressiondata_cv_human_uniquegene_proteincoding.csv", row.names = F) #Curated brainspan expression dataset

#############################
# 3. Spatiotemporal groups  #
#############################

## Note - curated dataset is renamed "d"! ##

setwd()
columns <- read.csv("columns_metadata.csv")
columns$colname <- paste("col",columns$column_num, sep="")

setwd()
d<- read.csv("Brainspan_expressiondata_cv_human_uniquegene_proteincoding.csv")

# Divide in age / region groups 
unique(columns$age)
p1 <- as.vector(unique(columns$age)[1:4])
p2 <- as.vector(unique(columns$age)[5:11])
p3 <- as.vector(unique(columns$age)[12:13])
p4 <- as.vector(unique(columns$age)[14:15])
p5 <- as.vector(unique(columns$age)[16:19])
p6 <- as.vector(unique(columns$age)[20:22])
p7 <- as.vector(unique(columns$age)[23:25])
p8 <- as.vector(unique(columns$age)[26:31])

unique(columns$structure_acronym)
r1 <- c("IPC", "A1C", "V1C", "STC", "ITC")
r2 = c("S1C", "M1C", "OFC", "DFC", "MFC", "VFC")
r3 = c("STR", "HIP", "AMY")
r4 = c("MD", "CBC", "CB")
r5 = c('PCx', 'DTH', 'TCx', 'MGE', 'URL', 'M1C-S1C', 'CGE', 'LGE', 'Ocx') # ALL OTHER REGIONS - THEY ARE ONLY UNTIL PCW 19 


pall <- columns$colname

p1r1 <- columns$colname[(is.element(columns$age, p1)) & is.element(columns$structure_acronym, r1)]
p1r2 <- columns$colname[(is.element(columns$age, p1)) & is.element(columns$structure_acronym, r2)]
p1r3 <- columns$colname[(is.element(columns$age, p1)) & is.element(columns$structure_acronym, r3)]
p1r4 <- columns$colname[(is.element(columns$age, p1)) & is.element(columns$structure_acronym, r4)]
p1r5 <- columns$colname[(is.element(columns$age, p1)) & is.element(columns$structure_acronym, r5)]

p2r1 <- columns$colname[(is.element(columns$age, p2)) & is.element(columns$structure_acronym, r1)]
p2r2 <- columns$colname[(is.element(columns$age, p2)) & is.element(columns$structure_acronym, r2)]
p2r3 <- columns$colname[(is.element(columns$age, p2)) & is.element(columns$structure_acronym, r3)]
p2r4 <- columns$colname[(is.element(columns$age, p2)) & is.element(columns$structure_acronym, r4)]
p2r5 <- columns$colname[(is.element(columns$age, p2)) & is.element(columns$structure_acronym, r5)]

p3r1 <- columns$colname[(is.element(columns$age, p3)) & is.element(columns$structure_acronym, r1)]
p3r2 <- columns$colname[(is.element(columns$age, p3)) & is.element(columns$structure_acronym, r2)]
p3r3 <- columns$colname[(is.element(columns$age, p3)) & is.element(columns$structure_acronym, r3)]
p3r4 <- columns$colname[(is.element(columns$age, p3)) & is.element(columns$structure_acronym, r4)]
p3r5 <- columns$colname[(is.element(columns$age, p3)) & is.element(columns$structure_acronym, r5)]

p4r1 <- columns$colname[(is.element(columns$age, p4)) & is.element(columns$structure_acronym, r1)]
p4r2 <- columns$colname[(is.element(columns$age, p4)) & is.element(columns$structure_acronym, r2)]
p4r3 <- columns$colname[(is.element(columns$age, p4)) & is.element(columns$structure_acronym, r3)]
p4r4 <- columns$colname[(is.element(columns$age, p4)) & is.element(columns$structure_acronym, r4)]
p4r5 <- columns$colname[(is.element(columns$age, p4)) & is.element(columns$structure_acronym, r5)]

p5r1 <- columns$colname[(is.element(columns$age, p5)) & is.element(columns$structure_acronym, r1)]
p5r2 <- columns$colname[(is.element(columns$age, p5)) & is.element(columns$structure_acronym, r2)]
p5r3 <- columns$colname[(is.element(columns$age, p5)) & is.element(columns$structure_acronym, r3)]
p5r4 <- columns$colname[(is.element(columns$age, p5)) & is.element(columns$structure_acronym, r4)]
p5r5 <- columns$colname[(is.element(columns$age, p5)) & is.element(columns$structure_acronym, r5)]

p6r1 <- columns$colname[(is.element(columns$age, p6)) & is.element(columns$structure_acronym, r1)]
p6r2 <- columns$colname[(is.element(columns$age, p6)) & is.element(columns$structure_acronym, r2)]
p6r3 <- columns$colname[(is.element(columns$age, p6)) & is.element(columns$structure_acronym, r3)]
p6r4 <- columns$colname[(is.element(columns$age, p6)) & is.element(columns$structure_acronym, r4)]
p6r5 <- columns$colname[(is.element(columns$age, p6)) & is.element(columns$structure_acronym, r5)]

p7r1 <- columns$colname[(is.element(columns$age, p7)) & is.element(columns$structure_acronym, r1)]
p7r2 <- columns$colname[(is.element(columns$age, p7)) & is.element(columns$structure_acronym, r2)]
p7r3 <- columns$colname[(is.element(columns$age, p7)) & is.element(columns$structure_acronym, r3)]
p7r4 <- columns$colname[(is.element(columns$age, p7)) & is.element(columns$structure_acronym, r4)]
p7r5 <- columns$colname[(is.element(columns$age, p7)) & is.element(columns$structure_acronym, r5)]


p8r1 <- columns$colname[(is.element(columns$age, p8)) & is.element(columns$structure_acronym, r1)]
p8r2 <- columns$colname[(is.element(columns$age, p8)) & is.element(columns$structure_acronym, r2)]
p8r3 <- columns$colname[(is.element(columns$age, p8)) & is.element(columns$structure_acronym, r3)]
p8r4 <- columns$colname[(is.element(columns$age, p8)) & is.element(columns$structure_acronym, r4)]
p8r5 <- columns$colname[(is.element(columns$age, p8)) & is.element(columns$structure_acronym, r5)]

#chose which intervals to include
spatiotemp <- list(pall, 
                 p1r1, p1r2, p1r3, p1r4, #p1r5,
                 p2r1, p2r2, p2r3, p2r4, #p2r5,
                 p3r1, p3r2, p3r3, p3r4, #p3r5,
                 p4r1, p4r2, p4r3, p4r4, #p4r5,
                 p5r1, p5r2, p5r3, p5r4, #p5r5,
                 p6r1, p6r2, p6r3, p6r4, #p6r5,
                 p7r1, p7r2, p7r3, p7r4, #p7r5,
                 p8r1, p8r2, p8r3, p8r4 #, #p8r5
                 )



##############################
# 4. Correlation calculation # 
##############################

# Chose your gene of interest and add gene symbol. Check if it is present in d. 

geneofinterest <- "DNMT1"
is.element(geneofinterest, d$gene_symbol)
gene <- rownames(d[d$gene_symbol == geneofinterest,])

# Create new dataphrame for correlation values 
dcor <- d[,1:5] #copy gene information in new dataframe. Correlation values will be added later

## This loop calculates correlation values with your gene of interest, over all intervals 
## Takes lots of calculation power!  

for (i in 1:length(spatiotemp)){
  interval <- spatiotemp[[i]]
  dtemp <- d[,interval]
  ex <- which(apply(dtemp, 1, sum)==0) #calculate flat genes with no expression
  if(length(ex)>0){dtemp[ex,] <-NA} #replace flat genes with NA
  refgene <- (dtemp[gene,])
  rm(b)
  b<- vector()

    for (j in 1:nrow(dtemp)){
      if(j %% 1000==0) {print(paste("Percent cycle", i, "of",length(spatiotemp) , "done:", round(j/nrow(dtemp),digits=2)*100, "%"))}
        testgene <- (dtemp[j,])
        a <- cor(t(refgene), t(testgene), method = "pearson")
        b <- c(b, a)
    }
  
  dcor <- cbind(dcor, b) 
  
}


colnames(dcor) <- c(colnames(dcor)[1:5],
                    "pall", 
                    "p1r1", "p1r2", "p1r3", "p1r4", #"p1r5",
                    "p2r1", "p2r2", "p2r3", "p2r4", #"p2r5",
                    "p3r1", "p3r2", "p3r3", "p3r4", #"p3r5",
                    "p4r1", "p4r2", "p4r3", "p4r4", #"p4r5",
                    "p5r1", "p5r2", "p5r3", "p5r4", #"p5r5",
                    "p6r1", "p6r2", "p6r3", "p6r4", #"p6r5",
                    "p7r1", "p7r2", "p7r3", "p7r4", #"p7r5",
                    "p8r1", "p8r2", "p8r3", "p8r4"  #, #"p8r5"
                    )

colnames(dcor)
summary(dcor[dcor$gene_symbol=="BRD1",])

setwd()
write.csv(dcor, "brainspan_cv_human_uniquegene_pearson.csv", row.names = F) 

###########################
# 5. Statistical analysis #
###########################

### upload list of your group of genes which you want to test for enrichment ###

setwd()
testgroup <- read.table("", header = T, sep = ",",fill = TRUE)

dcor$istestgroup <- ifelse(is.element(dcor$gene_symbol, testgroup$Gene.Names),1,0)
summary(dcor$istestgroup)
length(dcor$gene_symbol[dcor$istestgroup == T])

################################################################
# 5a. overall comparison of distribution of correlation values #
################################################################

library(sm)
sm.density.compare(dcor$pall, dcor$istestgroup, col=c("black","green3"),lty=c(1,1), lwd=2, 
                   xlab="Correlation values",xlim=c(-1,1))
legend("topright",legend=c("all transcripts","testgroup transcripts"),lty=c(1,1), col=c("black","green3"), lwd=2, cex=0.8)
w<- wilcox.test(dcor$pall~dcor$istestgroup)
text(-0.8,0.9,paste("p=",signif(w$p.value,2)))

#######################################################################
# 5b. Spatiotemporal comparison of distribution of correlation values #
#######################################################################

# It is possible correlation values for a whole interval is NA (often r5). These must be removed before continuing. 
# The script might need finetuning if you removed columns. 


coln <- colnames(dcor)[6:38]
dcor.stat <- data.frame(matrix(0, nrow=length(coln)))
colnames(dcor.stat) <- c("data")
  

rm(p)
p <- vector()
rm(fr)
fr <- vector()
rm(fr.all)
fr.all <- vector()

for (i in coln){
  print(i)
  dcor$isdown <- ifelse((dcor[,i] < (-0.5) & !is.na(dcor[,i])) ,1,0) # annotate co-regulated genes
  tbl <- table(dcor$istestgroup[!is.na(dcor[,i])], dcor$isdown[!is.na(dcor[,i])])
  chi <- chisq.test(tbl)
  p <- c(p, chi$p.value)
  fr <- c(fr, tbl[4]/(tbl[3]+tbl[4]))
  fr.all <- c(fr.all, (tbl[2]+tbl[4])/sum(!is.na(dcor[,i])))
  }
dcor.stat$data <- coln
dcor.stat$pvalue.down <- p
dcor.stat$fraction.down <- fr
dcor.stat$fraction.all <- fr.all
dcor.stat$pvalue.down.adjust <- p.adjust(dcor.stat$pvalue.down, method="bonferroni")

rm(p)
p <- vector()
rm(fr)
fr <- vector()

for (i in coln){
  print(i)
  dcor$isup <- ifelse((dcor[,i] > (0.5) & !is.na(dcor[,i])) ,1,0) # annotate co-regulated genes
  tbl <- table(dcor$istestgroup[!is.na(dcor[,i])], dcor$isup[!is.na(dcor[,i])])
  chi <- fisher.test(tbl)
  p <- c(p, chi$p.value)
  fr <- c(fr, tbl[4]/(tbl[3]+tbl[4]))
  }

dcor.stat$pvalue.up <- p
dcor.stat$pvalue.up.adjust <- p.adjust(dcor.stat$pvalue.up, method="bonferroni")
dcor.stat$fraction.up <- fr





## Plot needs adjusting to personal preferences and settings
plot(x=(dcor.stat$fraction.all), type="n", pch=19, xlim=c(1,length(coln)), ylim=c(0,0.6), 
     xlab="",xaxt='n',ylab="testgroup fraction", lwd=2)
par(las=3)
xlabels=coln
axis(1, at=c(1:length(coln)),labels=xlabels)
par(las=1)
mtext(c("8-13pcw", "16-26pcw", "35-37pcw","4-10 mo", "1-4ye","8-13ye","15-19ye","21-40ye" ),side=1, at=c(4.5,8.5,12.5,16.5,20.5,24.5,28.5,32.5), adj=1, line=3)

par(new=TRUE)
plot(x=(dcor.stat$fraction.all),type="o", pch=19,xlim=c(1,length(coln)),ylim=c(0,0.6), xlab="",xaxt='n', yaxt="n",ylab="", lwd=2)

par(new=TRUE)
plot(x=(dcor.stat$fraction.up), type="o", pch=19, col="red",xlim=c(1,33),xlab="",xaxt='n',ylim=c(0,0.6), yaxt="n",ylab="", lwd=2 )

par(new=TRUE)
plot(x=(dcor.stat$fraction.down), type="o", pch=19, col="blue",xlim=c(1,33),xlab="",xaxt='n',ylim=c(0,0.6), yaxt="n",ylab="", lwd=2 )

legend("topright",legend=c("all transcripts","r > 0.5", "r < -0.5"),lty=c(1,1), col=c("black","red", "blue"), lwd=2, cex=0.8)


